//---------------------------------------------------------------------------
//!	TdsDataヘッダーファイル
//!	@date	20170315	新規作成
//!	@date	20170331	ボリューム最大値の値を修正、エラーコード追加
//!	@date	20170519	TdsVecExecMakeMatrix関数の引数を追加、エラーコード追加
//!	@date	20170620	エラーコード追加
//!	@date	20210107	ApiScan輝度マスク機能改良関数を追加
//!	@date	20220525	自己診断モーターチェック機能の判定方法変更に伴いSelfChkMotorResultへ変数を追加
//!	@date	20230831	ApiScanマスク機能改造対応
//---------------------------------------------------------------------------
#if !defined(__TdsData_h)
#define __TdsData_h

#ifdef EXPORT_DLL
#define	DLL_API	// __declspec( dllexport )
#else
#define	DLL_API	__declspec( dllimport )
#endif

//---------------------------------------------------------------------------
// 定義
//---------------------------------------------------------------------------
//! 計測モード
#define		TDS_MEASMODE_A					( 0x00 )		//!< Fh
#define		TDS_MEASMODE_B					( 0x01 )		//!< F
#define		TDS_MEASMODE_C					( 0x02 )		//!< D
#define		TDS_MEASMODE_D					( 0x03 )		//!< C+
#define		TDS_MEASMODE_E					( 0x04 )		//!< E
#define		TDS_MEASMODE_F					( 0x05 )		//!< -

//! 計測感度
#define		TDS_SENSITIVITY_0				( 0x00 )		//!< 標準
#define		TDS_SENSITIVITY_1				( 0x01 )		//!< 標準+1 PULS-Gをご使用の場合に選択できます
#define		TDS_SENSITIVITY_2				( 0x02 )		//!< 拡張用のため選択しないでください
#define		TDS_SENSITIVITY_3				( 0x03 )		//!< 拡張用のため選択しないでください
#define		TDS_SENSITIVITY_4				( 0x04 )		//!< 拡張用のため選択しないでください
#define		TDS_SENSITIVITY_5				( 0x05 )		//!< 拡張用のため選択しないでください
#define		TDS_SENSITIVITY_6				( 0x06 )		//!< 拡張用のため選択しないでください
#define		TDS_SENSITIVITY_7				( 0x07 )		//!< 拡張用のため選択しないでください
#define		TDS_SENSITIVITY_8				( 0x08 )		//!< 拡張用のため選択しないでください

//! 計測簡易感度
#define		TDS_SIMPLESENS_0				( 0x00 )		//!< Normal
#define		TDS_SIMPLESENS_1				( 0x01 )		//!< High ApiScanをご使用の場合に選択できます
#define		TDS_SIMPLESENS_2				( 0x02 )		//!< 拡張用のため選択しないでください
#define		TDS_SIMPLESENS_3				( 0x03 )		//!< 拡張用のため選択しないでください
#define		TDS_SIMPLESENS_4				( 0x04 )		//!< 拡張用のため選択しないでください

//! レーザーパワー
#define		TDS_LASERPOWER_1				( 0x00 )		//!< 拡張用のため選択しないでください
#define		TDS_LASERPOWER_2				( 0x01 )		//!< 拡張用のため選択しないでください
#define		TDS_LASERPOWER_3				( 0x02 )		//!< 拡張用のため選択しないでください
#define		TDS_LASERPOWER_4				( 0x03 )		//!< 拡張用のため選択しないでください
#define		TDS_LASERPOWER_5				( 0x04 )		//!< 拡張用のため選択しないでください
#define		TDS_LASERPOWER_6				( 0x05 )		//!< 拡張用のため選択しないでください
#define		TDS_LASERPOWER_FREE				( 0x06 )		//!< 拡張用のため選択しないでください

//! ガイドレーザーパワー
#define		TDS_GUIDEPOWER_0				( 0x00 )		//!< 低 ApiScanをご使用の場合に選択できます
#define		TDS_GUIDEPOWER_1				( 0x01 )		//!< 中 ApiScanをご使用の場合に選択できます
#define		TDS_GUIDEPOWER_2				( 0x02 )		//!< 高 ApiScanをご使用の場合に選択できます

//! 計測タイプ
#define		TDS_MEASTYPE_NORMAL				( 0x00 )		//!< 通常測定モード
#define		TDS_MEASTYPE_MACHINE_CHECK		( 0x01 )		//!< 始業前点検モード
#define		TDS_MEASTYPE_SELF_CHECK_SENS	( 0x02 )		//!< 自己診断感度チェックモード
#define		TDS_MEASTYPE_CALIB_USER			( 0x03 )		//!< ユーザーキャリブレーションモード
#define		TDS_MEASTYPE_CALIB_FULL			( 0x04 )		//!< フルキャリブレーションモード
#define		TDS_MEASTYPE_CALIB_SPH_CHECK	( 0x05 )		//!< 球確認計測モード
#define		TDS_MEASTYPE_CALIB_PLN_CHECK	( 0x06 )		//!< 面確認計測モード
#define		TDS_MEASTYPE_CALIB_SPH_RECHECK	( 0x07 )		//!< 球確認計測再計算
#define		TDS_MEASTYPE_CALIB_MAKE_OFB		( 0x08 )		//!< OFB作成モード(未使用)
#define		TDS_MEASTYPE_CALIB_MAKE_TTB		( 0x09 )		//!< TTB作成モード(未使用)

//! X点間補間モード
#define		TDS_INTERPOLATIONX_NONE			( 0x00 )		//!< X点間補間なし
#define		TDS_INTERPOLATIONX_NINE			( 0x01 )		//!< X点間補間あり 直線補間 ApiScanをご使用の場合に選択できます

//! システムボリューム設定
#define		TDS_SYSTEMVOLUME_OFF			( 0x00 )		//!< ボリュームOFF
#define		TDS_SYSTEMVOLUME_ON				( 0x01 )		//!< ボリュームON

//! システムボリューム設定下限上限
#define		TDS_SYSTEMVOLUME_MIN			( 0x00 )		//!< ボリューム最小値
#define		TDS_SYSTEMVOLUME_MAX			( 0xFF )		//!< ボリューム最大値

//! その他
#define		TDS_NODATA						( 999999.0 )	//!< 点データ無し

//! 2ピークマスク設定
#define		TDS_2PEAK_MASK_ENABLE			( 0x00 )		//!< マスク有効(データ無効化)
#define		TDS_2PEAK_MASK_DISABLE_WIDTH	( 0x01 )		//!< マスク無効 波形幅が広い方のデータを取得
#define		TDS_2PEAK_MASK_DISABLE_NEAR		( 0x02 )		//!< マスク無効 距離(Z)が近い方のデータを取得

//---------------------------------------------------------------------------
// 構造体定義
//---------------------------------------------------------------------------
// PulsData
typedef struct										//! 1点分のスキャナデータを格納するための構造体
{
	int				lineNo ;						//!< アームのＩＤ
	int				measID ;						//!< 計測種別（1=通常計測／0＝ダミー計測）
	int				dataDisable[2];					//!< 計測データの有効=0/無効=1
													//	[0] 距離マスクで無効時、1 となる
													//	[1] 輝度マスクで無効時、1 となる（現在未使用）
													//	無効データの場合、両方が 1 となる
	double			dataX ;							//!< X (999999.0 の時、無効データ)
	double			dataY ;							//!< Y (999999.0 の時、無効データ)
	double			dataZ ;							//!< Z (999999.0 の時、無効データ)
	int				dataR ;							//!< 輝度
	int				dataS ;							//!< 感度
	int				dataLd;							//!< LDドライブ電流値
}PulsData;

// PulsZMask
typedef struct										//! 距離マスクの設定値を格納するための構造体
{
	int				use[6][3][2];					//!< マスク使用の有無（1=使用する／0=使用しない）
	double			data[6][3][2];					//!< マスク設定値
													//!< データ配列の意味	[計測モード][XYZ][最大値/最小値]
													//!<	[計測モード]	= 0〜、A(Fh)、B、C、D(C+)、E、F
													//!<	[XYZ]			= 0(X)、1(Y)、2(Z)
													//!<	[最大値/最小値]	= 0(最大値)、1(最小値)
}PulsZMask;

// VecRet
typedef	struct										//! ベクトロンデータを格納するための構造体
{
	int				no1;							//!< データ要求に対しての要求されたラインナンバー
	int				no2;							//!< データ要求、ステータス要求に対しての最新のラインナンバー
	int				no3;							//!< ステータス要求に対しての最古の利用可能なラインナンバー
	double			xyz[3];							//!< データ要求に対してのXYZ
	double			ijk[3];							//!< データ要求に対してのIJK
	double			ijk2[3];						//!< データ要求に対してのI2J2K2
	int				error;							//!< エラーコード （次ページ参照）
	int				button;							//!< 測定ボタンの状態 (ON:1 OFF:0)
	int				scan;							//!< 測定状態（アイドル中:0 スキャン中:1 その他:2）
	double			angle[7];						//!< 各軸の角度([0]:7軸 [1]〜[6]:1〜6軸)
}VecRet;

// VecCtEx
typedef struct										//! 座標系作成時に1点分のベクトロンデータを格納するための構造体
{
     int			no;								//!< アームラインNo ※
     double			xyz[3];							//!< XYZ座標(mm)
     double			ijk[3];							//!< アーム1軸情報IJK(単位ベクトル) ※
     double			ijk2[3];						//!< アーム7軸情報I2J2K2(単位ベクトル) ※
     unsigned int	button;							//!< 測定ボタンの状態 ON(=1)、OFF(=0) ※
     long			cnt[9];							//!< パラメータ※
     int			er_code[9];						//!< エラーコード※
     double			angle[7];						//!< 各軸の角度(度) ※
} VecCtEx;

// MakeMtxInfo
typedef struct										//! 座標系作成に関する情報を格納する構造体
{
     int			iPlnShotNum;					//!< 平面測定数(ダミー測定含む)
     int			iAxisShotNum;					//!< 軸測定数(ダミー測定含む)
     int			iOriginShotNum;					//!< 原点球測定数
     int			iShotMax;						//!< 測定数(上記の総和)
} MakeMtxInfo;

// MakeMtxResult
typedef struct										//! 座標系作成結果を格納する構造体
{
     double			dMatrix[4][4];					//!< 座標変換マトリクス
     double			dSphere[3];						//!< 球の中心座標 {x,y,z}
} MakeMtxResult;

// CalibInfo
typedef struct										//! キャリブレーション算出結果を格納する構造体
{
     int			iUserCalibShotNum;				//!< ユーザーキャリブレーションのショット数
     int			iFullCalibShotNum;				//!< フルキャリブレーションのショット数
     int			iFullCalibCalcuShotNum;			//!< フルキャリブレーションの計算実行に必要なショット数
     int			iPlnCheckShotNum;				//!< 面確認計測のショット数
     int			iSphCheckShotNum;				//!< 球確認計測のショット数
     int			iMakeOfbShotNum;				//!< OFB作成計測のショット数(未使用)
     int			iMakeTtbShotNum;				//!< TTB作成計測のショット数(未使用)
} CalibInfo;

// SensorParam
typedef struct										//! センサパラメータを格納する構造体
{
     double			dSensorOffset[3];				//!< センサオフセット値X,Y,Z (mm)
     double			dSensorTilt[3];					//!< センサチルト値X,Y,Z (度)
} SensorParam;

// ArmParam
typedef struct										//! アームパラメータを格納する構造体
{
     double			dArmAddOffset[3];				//!< アームオフセット加算値X,Y,Z (mm)
     double			dArmAddTilt[3];					//!< アームチルト加算値X,Y,Z (度)
} ArmParam;

// alibResult
typedef struct										//! キャリブレーション算出結果を格納する構造体
{
     SensorParam	tSensorParam;					//!< センサパラメータ
     ArmParam		tArmParam;						//!< アームパラメータ
     double			dResult[4][3];					//!< 4球中心座標結果(面確認計測の場合は面法線ベクトル)
} CalibResult;

// ChkScnInfo
typedef struct										//! 始業前点検に関する情報を格納する構造体
{
     int			iChkScnShotNum;					//!< 始業前点検のショット数

} ChkScnInfo;

// ChkScnResult
typedef struct										//! 始業前点検の結果を格納するための構造体
{
     short			sResult;						//!< OK(=1)、NG(=0)
     double			dSph[4][4];						//!< 4ショットそれぞれの球重心と球半径(mm)
     double			dSphMaxMin[3][2];				//!< 球重心4ショット中のXYZの最大値と最小値(mm)
     double			dPlnHeight[4];					//!< 4ショットそれぞれの面高さ(mm)
     double			dPlnLength;						//!< 面間距離基準値(mm)
     double			dPlnLenDifference;				//!< 面間距離誤差値(mm)
     int			iAverageR[4];					//!< 4ショットそれぞれの平均輝度
     int			iCheckBright;					//!< 輝度チェック結果 OK(=1)、NG(=0)

} ChkScnResult;

// SelfChkLatchResult
typedef struct										//! 自己診断のラッチ通信チェックの結果を格納する構造体
{
     int			iResult;						//!< OK(=1)、NG(=0)
     int			iSendLatchCount;				//!< 送信したラッチ信号の数
     int			iRecvLatchCount;				//!< 受信したラッチ信号の数

} SelfChkLatchResult;

// SelfChkMotorResult
typedef struct										//! 自己診断のモーターチェックの結果を格納する構造体
{
    int			iResult;						//!< OK(=1)、NG(=0)
    int			iSensorPlus;					//!< モーターをプラス方向へ移動した際のセンサパルス数
    int			iControllerPlus;				//!< モーターをプラス方向へ移動した際のコントローラパルス数
    int			iSensorMinus;					//!< モーターをマイナス方向へ移動した際のセンサパルス数
    int			iControllerMinus;				//!< モーターをマイナス方向へ移動した際のコントローラパルス数
    int			iBaseMove;						//!< モーター移動量基準値 (ApiScanの場合200、PULS-Gの場合100)
    int			iSensorMovePlus;				//!< モーターをプラス方向へ移動した際のセンサ移動量
    int			iControllerMovePlus;			//!< モーターをプラス方向へ移動した際のコントローラ移動量
    int			iSensorMoveMinus;				//!< モーターをマイナス方向へ移動した際のセンサ移動量
    int			iControllerMoveMinus;			//!< モーターをマイナス方向へ移動した際のコントローラ移動量

} SelfChkMotorResult;

// SelfChkSensResult
typedef struct										//! 自己診断の感度チェックの結果を格納する構造体
{
     int			iResult;						//!< OK(=1)、NG(=0)
     int			iBaseBright;					//!< 基準輝度
     int			iResultBright;					//!< 平均輝度(測定結果)
     double			dThreshold;						//!< 許容値(%)

} SelfChkSensResult;

// VecGaugeIni
typedef struct										//! ゲージ基準情報を格納する構造体 (vecgauge.iniファイルのパラメータ)
{
     int			iGaugeType;						//!< マルチゲージ選択番号
     char			szGaugeName[256];				//!< マルチゲージ型名
     double			dSphDiameter;					//!< マルチゲージ直径(mm)
     double			dPlnLengthPnt[4][3];			//!< マルチゲージ面間距離用の点群抽出ポイント(mm)(マルチゲージ側面の各面のXYZ座標)
} VecGaugeIni;

// SensorSettingIni
typedef struct										//! 始業前点検の設定を格納する構造体です。SensorSetting.iniファイルのパラメータです。
{
     double			dCenterScopePnt[3];				//!< 球中心座標 (mm) (0,0,0固定)
     double			dPlaneScopePnt[4][3];			//!< 面高さ用の点群抽出ポイント(mm)
     double			dPlaneScopeRad;					//!< 面高さ用の点群抽出球半径(mm)
     double			dLengthScopeRad;				//!< 面間距離用の点群抽出球半径(mm)
     int			iLengthScopeRadCnt;				//!< 面間距離用の点群抽出球数
     double			dCenterLimit;					//!< 球中心座標 判定許容値
     double			dPlaneHeightLimit;				//!< 面高さ 判定許容値
     double			dPlaneLengthLimit;				//!< 面間距離 判定許容値
     int			iPlaneHeightMeasPntMin;			//!< 面高さ測定時の点数下限値
     int			iPlaneLengthMeasPntMin;			//!< 面間距離測定時の点数下限値
     int			iBrightBase;					//!< マルチゲージ測定時の基準輝度
     double			dBrightLimit;					//!< 輝度チェックの判定許容値 (例として80%の場合は0.8を設定)
} SensorSettingIni;


//---------------------------------------------------------------------------
// エラーコード定義
//---------------------------------------------------------------------------
#define		TDS_ERR_NONE					( 0 )	// 正常
#define		TDS_ERR_PARAMETER				( 1 )	// パラメータエラー
#define		TDS_ERR_SCANNER_CONTROL			( 2 )	// スキャナ制御エラー
#define		TDS_ERR_GET_POINT_DATA			( 3 )	// スキャナ点群データ取得エラー
#define		TDS_ERR_NOT_INITIALIZE			( 4 )	// 未初期化エラー

#define		TDS_ERR_CALIB_SHOT_DATA_HALF	( 10 )	// 点群数エラー(点群数半分以下)
#define		TDS_ERR_CALIB_SHOT_AXIS			( 11 )	// 座標系エラー
#define		TDS_ERR_CALIB_SHOT_NEAR			( 12 )	// 計測距離が近すぎる
#define		TDS_ERR_CALIB_SHOT_FAR			( 13 )	// 計測距離が遠すぎる
#define		TDS_ERR_CALIB_SHOT_NO_DATA		( 14 )	// 点群取得失敗
#define		TDS_ERR_CALIB_SHOT_1AXIS		( 15 )	// 1軸角度エラー
#define		TDS_ERR_CALIB_SHOT_7AXIS		( 16 )	// 7軸角度エラー
#define		TDS_ERR_CALIB_SHOT_DATA_LACK	( 17 )	// 点群欠損エラー
#define		TDS_ERR_CALIB_SHOT_MAKE_SPH		( 18 )	// 球作成失敗
#define		TDS_ERR_CALIB_SHOT_2AXIS		( 19 )	// 2軸角度エラー

#define		TDS_ERR_CALIB_SHOT_MAKE_PLN		( 20 )	// 面作成失敗

#define		TDS_ERR_CALIB_CALCULATE			( 30 )	// キャリブレーション値作成失敗
#define		TDS_ERR_CALIB_NO_CHANGE			( 31 )	// キャリブレーション値変更なし
#define		TDS_ERR_CALIB_CHANGE_OVER		( 32 )	// キャリブレーション値変化量オーバーエラー
//#define	TDS_ERR_HOLDER_CHANGE_OVER		( 33 )	// ホルダ定数値変化量オーバーエラー ->上位アプリにてチェックしてください(ホルダ定数変化量オーバーエラーの場合でもキャリブ値は保存する仕様です)
#define		TDS_ERR_CALIB_CALC_SHOT			( 34 )	// キャリブレーション計算を実行するショットNoでない

#define		TDS_ERR_MACHINECHECK_DATA_LACK	( 40 )	// 始業前点検 面計測点数エラー(許容値設定よりも少ない)
#define		TDS_ERR_MACHINECHECK_FILE_OUT	( 41 )	// 始業前点検 結果ログファイル出力失敗

#define		TDS_ERR_DATA_ALLOC				( 50 )	// 点群データ用メモリ確保失敗
#define		TDS_ERR_DATA_LINE_NO			( 51 )	// ラインNo異常

#define		TDS_ERR_MAKE_MTX_PLN			( 60 )	// 座標系作成 面作成失敗
#define		TDS_ERR_MAKE_MTX_AXS			( 61 )	// 座標系作成 軸作成失敗
#define		TDS_ERR_MAKE_MTX_OGN			( 62 )	// 座標系作成 原点作成失敗

#define		TDS_ERR_SELF_CHK_LATCH_START	( 70 )	// 自己診断 既にラッチ送信が開始されている

//---------------------------------------------------------------------------
// 関数定義
//---------------------------------------------------------------------------
extern "C"
{
//===========================================================================
//	初期化関数
//===========================================================================

//---------------------------------------------------------------------------
//!	INIファイルを出力するフォルダーのパスを設定します。
//  
//!	@param	szPath		(IN)		フォルダーパス
//  
//!			初期化関数をコールする前に使用してください。
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetIniFilePath( char* szPath );

//---------------------------------------------------------------------------
//!	INIファイルを出力するフォルダーのパスを取得します。
//  
//!	@param	szPath		(OUT)		フォルダーパス
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetIniFilePath( char* szPath );

//---------------------------------------------------------------------------
//!	ログファイルを出力するフォルダーのパスを設定します。
//  
//!	@param	szPath		(IN)		フォルダーパス
//  
//!			初期化関数をコールする前に使用してください。
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetLogFilePath( char* szPath );

//---------------------------------------------------------------------------
//!	ログファイルを出力するフォルダーのパスを取得します。
//  
//!	@param	szPath		(OUT)		フォルダーパス
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetLogFilePath( char* szPath );

//---------------------------------------------------------------------------
//!	初期化関数
//  
//!	@return	異常処理(LAN接続失敗)(=0)、 正常処理(スキャナー接続先あり)(=1)、 正常処理(スキャナー接続先なし)(=2)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsVecMeasInit();

//---------------------------------------------------------------------------
//!	終了用関数
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecMeasExit();

//---------------------------------------------------------------------------
//! ライブラリへスキャナコントローラのIPアドレスを設定します。
//  
//! @param dwAdrs	(IN) コントローラのIPアドレス(HEX)
//
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetControllerAddress( DWORD dwAdrs );

//---------------------------------------------------------------------------
//! コントローラのネットワーク設定を変更します。
//  
//! @param	dwAdrs		(IN)	IPアドレス(HEX)
//! @param	dwMask		(IN)	サブネットマスク(HEX)
//! @param	dwGateway	(IN)	Gatewayアドレス(HEX)
//! @param	dwDNS		(IN)	DNSサーバーアドレス(HEX)
//
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecConfigControllerAddressSetting( DWORD dwAdrs, DWORD dwMask, DWORD dwGateway,  DWORD dwDNS );

//---------------------------------------------------------------------------
//! ベクトロンファームのバージョンを設定します。
//  
//! @param	iVersion	(IN)	ベクトロンファームのバージョン
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetArmVersion( int iVersion );


//===========================================================================
//	計測設定関数
//===========================================================================
//---------------------------------------------------------------------------
//!	計測モードを変更します。
//  
//!	@param	iMode		(IN)	設定する計測モード
//
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecChangeMode( int iMode );

//---------------------------------------------------------------------------
//! 現在の計測モードのポイント数と点間ピッチを取得します。
//  
//! @param	piXnum		(OUT)	1ラインのポイント数を格納する変数のポインタ
//! @param	pdXPitch	(OUT)	点間ピッチ(mm)を格納する変数のポインタ
//  
//! @return	 	現在の計測モード(0〜5)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsVecGetMode( int* piXnum, double* pdXPitch );

//---------------------------------------------------------------------------
//! 計測感度を変更します。
//  
//! @param	iSens	(IN)	設定する計測感度
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecChangeSens( int iSens );

//---------------------------------------------------------------------------
//! 計測簡易感度を変更します。
//  
//! @param	iSimpleSens	(IN)	設定する計測簡易感度
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
 DLL_API BOOL WINAPI TdsVecChangeSimpleSens( int iSimpleSens );

//---------------------------------------------------------------------------
//! 距離マスクパラメータの設定を行います。
//  
//! @param	iSn		(IN)	スキャナ番号(=0)
//! @param	ptZMask	(IN)	距離マスクパラメータ構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecZMaskSet( int iSn, PulsZMask* ptZMask );

//---------------------------------------------------------------------------
//! 距離マスクパラメータの取得を行います。
//  
//! @param	iSn		(IN)	スキャナ番号(=0)
//! @param	ptZMask	(OUT)	距離マスクパラメータを格納する構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecZMaskGet( int iSn, PulsZMask* ptZMask );

//---------------------------------------------------------------------------
//! 距離マスクの有効/無効を設定します。
//  
//! @param	 bEnable	(IN)	距離マスク有効(=TRUE)、無効(=FALSE)
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetZMaskEnable( BOOL bEnable );	

//---------------------------------------------------------------------------
//! 距離マスクの有効/無効を取得します。
//  
//! @param	 bEnable	(OUT)	距離マスク有効(=TRUE)、無効(=FALSE)
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetZMaskEnable( BOOL* pbEnable );	

//---------------------------------------------------------------------------
//! 計測タイプを設定します。
//  
//! @param	iMeasType	(IN)	設定する計測タイプ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetMeasType( int iMeasType );

//---------------------------------------------------------------------------
//! 計測タイプを取得します。
//  
//! @param	piMeasType	(OUT)	計測タイプを格納する変数へのポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetMeasType( int* piMeasType );

//---------------------------------------------------------------------------
//! ガイドレーザーのパワーを設定します。
//  
//! @param	iGuideLaserPow	(IN)	設定するガイドレーザーパワー
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetGuideLaserPower( int iGuideLaserPow );

//---------------------------------------------------------------------------
//! ガイドレーザーのパワーを取得します。
//  
//! @param	piGuideLaserPow	(OUT)	ガイドレーザーパワーを格納する変数へのポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetGuideLaserPower( int* piGuideLaserPow );

//---------------------------------------------------------------------------
//! X点間補間モードを設定します。
//  
//! @param	iInterpolation	(IN)	設定するX点間補間モード
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetInterpolationX( int iInterpolation );

//---------------------------------------------------------------------------
//! X点間補間モードを取得します。
//  
//! @param	piInterpolation	(OUT)	X点間補間モードを格納する変数へのポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetInterpolationX( int* piInterpolation );

//---------------------------------------------------------------------------
//! システムボリュームを設定します。
//  
//! @param	iSetting	(IN)	システムボリューム設定
//! @param	iVolume		(IN)	スピーカ音量
//  
//! @return		 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetSystemVolume( int iSetting, int iVolume );


//===========================================================================
//	計測関数
//===========================================================================
//---------------------------------------------------------------------------
//! ダミースキャンを開始します。
//  
//! @param	iSn	(IN)	スキャナ番号(=0)
//! @param	iSw	(IN)	エラー処理(=0) 
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecDummyScanStart( int iSn, int iSw = 0 );

//---------------------------------------------------------------------------
//! スキャンを開始します。
//  
//! @param	iSn	(IN)	スキャナ番号(=0)
//! @param	iSw	(IN)	エラー処理(=0)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecScanStart( int iSn, int iSw = 0 );

//---------------------------------------------------------------------------
//! スキャンを終了します。
//  
//! @param	iSn	(IN)	スキャナ番号(=0)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecScanStop( int iSn );

//---------------------------------------------------------------------------
//! リセット処理を行います。
//  
//! @param	iSn	(IN)	スキャナ番号(=0)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
 DLL_API BOOL WINAPI TdsVecMeasReset( int iSn );

//---------------------------------------------------------------------------
//! ベクトロンの最初の1点をライブラリへ設定します。
//  
//! @param	ptVecData	(IN)	ベクトロンデータ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVec1stPnt( VecRet* ptVecData );

//---------------------------------------------------------------------------
//! 指定したラインNoのスキャナデータが存在するか問い合わせます。
//  
//! @param	iLineNo	(IN)	ラインNo
//  
//! @return	 スキャナデータの存在ステータス
//!			 無し(一定数データが無い状態が続いたためLAN切れエラーとする)(=-3)
//!			 無し(次のラインが存在するため、ライン抜けエラー)(=-2)
//!			 無し(データ受信待ち)(=-1)
//!			 あり(但し受信中の可能性あり)(=0)
//!			 あり(次のラインも存在するため受信完了している状態)(=1)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsIsLineExist( int iLineNo );

//---------------------------------------------------------------------------
//! ベクトロンの次の1点をライブラリへ設定し、1ライン分のスキャナデータを取得します。
//  
//! @param	ptVecData	(IN)	ベクトロンデータ構造体のポインタ
//! @param	ptPulsData	(OUT)	スキャナデータを格納する構造体のポインタ
//! @param	iBuffNum	(IN)	データバッファ最大数
//! @param	piDataNum	(OUT)	格納したデータ数を格納する変数のポインタ
//  
//! @return	 	点数
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsVecAndMeas( VecRet* ptVecData, PulsData* ptPulsData, int iBuffNum, int* piDataNum );

//---------------------------------------------------------------------------
//! 1ライン分のスキャナローカルデータを取得します。
//  
//! @param	iLineNo		(IN)	取得するデータのラインNo
//! @param	ptPulsData	(OUT)	スキャナデータを格納する構造体のポインタ
//! @param	iBuffNum	(IN)	データバッファ最大数
//! @param	piDataNum	(OUT)	格納したデータ数を格納する変数のポインタ
//  
//! @return	 	点数
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsVecGetLocalData( int iLineNo, PulsData* ptPulsData, int iBuffNum, int* piDataNum );


//===========================================================================
//	その他スキャナ制御関数
//===========================================================================
//---------------------------------------------------------------------------
//! スキャナへの電源供給をONします。
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecScannerPowerOn();

//---------------------------------------------------------------------------
//! スキャナへの電源供給をOFFします。
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecScannerPowerOff();

//---------------------------------------------------------------------------
//! コントローラのデータバッファをクリアします。
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecBufferClear();


//===========================================================================
//	情報取得関数
//===========================================================================
//---------------------------------------------------------------------------
//! スキャナがサブファームウェアで起動していないか確認します。
//  
//! @param	pbSensorFirm	(OUT)	センササブファーム起動情報を格納する変数のポインタ
//! @param	pbSensorFpga	(OUT)	センササブFPGA起動情報を格納する変数のポインタ
//! @param	pbCtrlFirm		(OUT)	コントローラサブファーム起動情報を格納する変数のポインタ
//! @param	pbCtrlFpga		(OUT)	コントローラサブFPGA起動情報を格納する変数のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecIsSubFirmware( BOOL* pbSensorFirm, BOOL* pbSensorFpga, BOOL* pbCtrlFirm, BOOL* pbCtrlFpga );

//---------------------------------------------------------------------------
//! センサROMパラメータの読み込み状態を取得します。
//  
//! @return	 	パラメータ読み込みステータス
//				読み込み失敗(=-1)、未読み込み(=-0)、読み込み成功(=1)、読み込み中(=2)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsVecGetEepromReadFlg();

//---------------------------------------------------------------------------
//! 計測モードの有効/無効情報、モード名称を取得します。
//  
//! @param	iUse	(OUT)	計測モードの有効(=1)/無効(=0)
//! 						例) iUse[ 4 ] = 1		Eモードが有効
//! @param	szName	(OUT)	モード名称 (最大50文字)
//! 						[計測モードNo][計測モード名称文字]
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetAllModeName( int iUse[ 6 ], char szName[ 6 ][ 50 ] );

//---------------------------------------------------------------------------
//! 計測感度の有効/無効情報を取得します。
//  
//! @param	iUse	(OUT)	計測感度の有効(=1)/無効(=0)
//! 						例) iUse[ 1 ] = 1		感度1(標準+1)が有効
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetAllSens( int iUse[ 9 ] );

//---------------------------------------------------------------------------
//! 計測簡易感度の有効/無効情報、名称を取得します。
//  
//! @param	iUse	(OUT)	計測簡易感度の有効(=1)/無効(=0)
//! 						例) iUse[ 1 ] = 1		簡易感度1(High)が有効
//! @param	szName	(OUT)	簡易感度名称 (最大50文字)
//! 						[簡易感度No][簡易感度名称文字]
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetAllSimpleSensName( int iUse[ 5 ], char szName[ 5 ][ 50 ] );

//---------------------------------------------------------------------------
//! スキャナのステータスを取得します。
//  
//! @param	pbExist		(OUT)	スキャナ接続ステータスを格納する変数のポインタ
//! 							スキャナ接続あり(=TRUE)、接続無し(=FALSE)
//! @param	pbConnect	(OUT)	スキャナ接続先ステータスを格納する変数のポインタ
//! 							接続先ベクトロン(=TRUE)、暖機ユニット(=FALSE)
//! @param	pbWarmup	(OUT)	暖機ステータスを格納する変数のポインタ
//! 							暖機完了(=TRUE)、暖機中(=FALSE)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecScannerStatus( BOOL* pbExist, BOOL* pbConnect, BOOL* pbWarmup );

//---------------------------------------------------------------------------
//! センサスイッチ1の情報を返します。
//  
//! @return	 	ON(=1)、OFFまたはクリアしたまま(=0)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsSw1Get();

//---------------------------------------------------------------------------
//! センサスイッチ2の情報を返します。
//  
//! @return	 	ON(=1)、OFFまたはクリアしたまま(=0)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsSw2Get();

//---------------------------------------------------------------------------
//! センサスイッチ3の情報を返します。
//  
//! @return	 	ON(=1)、OFFまたはクリアしたまま(=0)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsSw3Get();

//---------------------------------------------------------------------------
//! センサスイッチ4の情報を返します。
//  
//! @return	 	ON(=1)、OFFまたはクリアしたまま(=0)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsSw4Get();

//---------------------------------------------------------------------------
//! コントローラのデータバッファの状態を取得します。
//  
//! @param	pbFull	(OUT)	バッファフルステータスを格納する変数のポインタ
//! 						バッファフル(=TRUE)、バッファ空きあり(=FALSE)
//! @param	pbEmpty	(OUT)	バッファエンプティステータスを格納する変数のポインタ
//! 						バッファが空になった(=TRUE)、バッファへデータあり(=FALSE)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecBufferStatus( BOOL* pbFull, BOOL* pbEmpty );

//---------------------------------------------------------------------------
//! センサの温度を取得します。
//  
//! @param	pdTemp	(OUT)	温度を格納する変数のポインタ
//  
//! @return	 	正常処理(=0)、異常処理(=0以外)
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsVecGetTemperature( double* pdTemp );

//---------------------------------------------------------------------------
//! センサのバージョン情報を取得します。
//  
//! @param	pszSerial	(OUT)	センサシリアル番号 (12文字)
//! @param	pszFirmware	(OUT)	センサファームウェアのバージョン(4文字)
//! @param	pszFPGA		(OUT)	センサFPGAのバージョン(4文字)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecGetSensorVersion( char* pszSerial, char* pszFirmware, char* pszFPGA );

//---------------------------------------------------------------------------
//! コントローラのバージョン情報を取得します。
//  
//! @param	pszSerial	(OUT)	製品名称(10文字)
//! @param	pszFirmware	(OUT)	コントローラファームウェアのバージョン(最大32文字)
//! @param	pszMacID	(OUT)	MAC-IDのラベル(19文字)
//! @param	pszFPGA		(OUT)	コントローラFPGAのバージョン(22文字)
//! @param	pszAvr32	(OUT)	AVR32のバージョン(42文字)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecGetControllerVersion( char* pszName, char* pszFirmware,  char* pszMacID, char* pszFPGA, char* pszAvr32 );

//---------------------------------------------------------------------------
//! エラーコードを返します。
//  
//! @return	 	エラーコード
//---------------------------------------------------------------------------
DLL_API int WINAPI TdsVecErrorCode();


//===========================================================================
//	座標系作成専用関数
//===========================================================================
//---------------------------------------------------------------------------
//! 座標系作成の実行に必要な情報を取得します。
//  
//! @param	ptInfo	(OUT)	座標系作成の情報を格納する構造体のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetMakeMatrixInfo( MakeMtxInfo* ptInfo );

//---------------------------------------------------------------------------
//! 座標系作成時のアーム点データを設定します。
//  
//! @param	iShotNo		(IN)	座標系作成のショットNo (0〜)
//! @param	ptVecCtEx	(IN)	アーム点データ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetMakeMatrixData( int iShotNo, VecCtEx* ptVecCtEx );

//---------------------------------------------------------------------------
//! 座標系作成の結果算出を実行します。
// 
//!	@param	dProbBall	(IN)	接触式ボールプローブの直径
//! @param	ptResult	(OUT) 	座標系作成結果を格納する構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecExecMakeMatrix( double dProbBall, MakeMtxResult* ptResult );

//---------------------------------------------------------------------------
//! 座標系を設定します。
//  
//! @param	pdMtx[4][4]	(IN) 	座標系を格納した配列
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetMatrix( double pdMtx[4][4] );

//---------------------------------------------------------------------------
//! 座標系を取得します。
//  
//! @param	ptMtx[4][4]	(OUT) 	座標系を格納する配列
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetMatrix( double pdMtx[4][4] );

//---------------------------------------------------------------------------
//! 始業前点検で使用する球の中心座標を設定します。
//  
//! @param	pdSph[3]	(IN) 	球中心座標を格納した配列
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetSphCod( double pdSph[3] );

//---------------------------------------------------------------------------
//! 始業前点検で使用する球の中心座標を取得します。
//  
//! @param	pdSph[3]	(OUT) 	球中心座標を格納する配列
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetSphCod( double pdSph[3] );


//===========================================================================
//	キャリブレーション、始業前点検共通関数
//===========================================================================
//---------------------------------------------------------------------------
//! キャリブレーションまたは始業前点検を行う場合の現在のショットNoを設定します。
//  
//! @param	iShotNo	(IN)	ショット番号
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetShotNum( int iShotNo );

//---------------------------------------------------------------------------
//! キャリブレーションまたは始業前点検の測定した点群データが正しく設定されたかを確認します。
//  
//! @param	iShotNo	(IN)	ショット番号
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecCheckCalibData( int iShotNo );


//===========================================================================
//	キャリブレーション専用関数
//===========================================================================
//---------------------------------------------------------------------------
//! キャリブレーションの実行に必要な情報を取得します。
//  
//! @param	ptInfo	(OUT)	キャリブレーションの情報を格納する構造体のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetCalibInfo( CalibInfo* ptInfo );

//---------------------------------------------------------------------------
//! キャリブレーション各ショットのデータのOK/NG判定を行う/行わないフラグを設定します。
//  
//! @param	bDataCheck	(IN)	データのOK/NG判定を行う/行わないフラグ
//!								判定を行う(=TRUE)、判定を行わない(=FALSE)
//---------------------------------------------------------------------------
//DLL_API void WINAPI TdsVecSetDataCheckFlag( BOOL bDataCheck );

//---------------------------------------------------------------------------
//! キャリブレーション各ショットのデータのOK/NG判定を行う/行わないフラグを取得します。
//  
//! @param	pbDataCheck	(OUT)	データのOK/NG判定を行う/行わないフラグを格納する変数のポインタ
//!								判定を行う(=TRUE)、判定を行わない(=FALSE)
//---------------------------------------------------------------------------
//DLL_API void WINAPI TdsVecGetDataCheckFlag( BOOL* pbDataCheck );

//---------------------------------------------------------------------------
//! キャリブレーション計算時にパラメータテーブルの調整を行う/行わないフラグを設定します。
//  
//! @param	bZtableAdj	(IN)	パラメータテーブルの調整を行う/行わないフラグ
//!								調整を行う(=TRUE)、調整を行わない(=FALSE)
//---------------------------------------------------------------------------
//DLL_API void WINAPI TdsVecSetZTableAdjFlag( BOOL bZtableAdj );

//---------------------------------------------------------------------------
//! キャリブレーション計算時にパラメータテーブルの調整を行う/行わないフラグを取得します。
//  
//! @param	bZtableAdj	(OUT)	パラメータテーブルの調整を行う/行わないフラグを格納する変数のポインタ
//!								調整を行う(=TRUE)、調整を行わない(=FALSE)
//---------------------------------------------------------------------------
//DLL_API void WINAPI TdsVecGetZTableAdjFlag( BOOL* pbZtableAdj );

//---------------------------------------------------------------------------
//! キャリブレーションの計算を実行します。
//  
//! @param	ptResult	(OUT) 	キャリブレーション結果を格納する構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecExecCalibCalcu( CalibResult* ptResult );

//---------------------------------------------------------------------------
//! センサキャリブレーションパラメータを設定します。
//  
//! @param	ptParam	(IN) 	キャリブレーション値を格納する構造体のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetSensorCalibParam( SensorParam* ptParam );

//---------------------------------------------------------------------------
//! センサキャリブレーションパラメータを取得します。
//  
//! @param  ptParam	(OUT) 	キャリブレーション値を格納する構造体のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetSensorCalibParam( SensorParam* ptParam );

//---------------------------------------------------------------------------
//! キャリブレーションパラメータの変化量の上限を設定します。
//  
//! @param  dLimit[2]	(IN) 	キャリブレーションパラメータの変化量上限
//!		          [0]	(IN) 	   センサチルト変化量上限(度)
//!		          [1]	(IN) 	   センサオフセット変化量上限(mm)
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecSetCalibParamChangeLimit( double dLimit[2] );

//---------------------------------------------------------------------------
//! キャリブレーションパラメータの変化量の上限を取得します。
//  
//! @param  dLimit[2]	(OUT) 	キャリブレーションパラメータの変化量上限
//!		          [0]	(OUT) 	   センサチルト変化量上限(度)
//!		          [1]	(OUT) 	   センサオフセット変化量上限(mm)
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetCalibParamChangeLimit( double dLimit[2] );


//===========================================================================
//	始業前点検専用関数
//===========================================================================
//---------------------------------------------------------------------------
//! 始業前点検情報を取得します。
//  
//! @param  ptInfo	(OUT)	始業前点検の情報を格納する構造体のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecGetChkScnInfo( ChkScnInfo* ptInfo );

//---------------------------------------------------------------------------
//! 面間距離基準値をファイルから読み込み、ライブラリへ設定するとともに値を取得します。
//  
//! @param  pdLength	(OUT)	面間距離基準値(mm)を格納する変数のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecReadChkScnLengthBase( double* pdLength );

//---------------------------------------------------------------------------
//! 面間距離基準値をライブラリへ設定し、ファイルへ書き込みます。
//  
//! @param  dLength	(IN)	面間距離基準値(mm)
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecWriteChkScnLengthBase( double dLength );

//---------------------------------------------------------------------------
//! 始業前点検の計算を実行します。
//  
//! @param  ptResult	(OUT) 	始業前点検結果を格納する構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecExecChkScnCalcu( ChkScnResult* ptResult );

//---------------------------------------------------------------------------
//! 始業前点検結果ファイルを出力します。
//  
//! @param  szFileName	(IN)	ファイル名と拡張子を含む絶対パス
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecFileOutputCheckScnResult( char* szFileName);

//===========================================================================
//	自己診断専用関数
//===========================================================================
//---------------------------------------------------------------------------
//! 自己診断のラッチ通信チェックモードを開始します。
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecStartSelfChkLatchMode();

//---------------------------------------------------------------------------
//! 自己診断のラッチ通信チェックモードを終了します。
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecStopSelfChkLatchMode();

//---------------------------------------------------------------------------
//! 自己診断でラッチを受信した場合にライブラリへ受信を通知します。
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecLatchReceive();

//---------------------------------------------------------------------------
//! 自己診断のラッチ通信チェックの結果算出を実行します。
//  
//! @param  ptResult	(OUT) 	ラッチ通信チェックの結果を格納する構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecExecSelfChkLatch( SelfChkLatchResult* ptResult );

//---------------------------------------------------------------------------
//! 自己診断のモーターチェックの結果算出を実行します。
//  
//! @param  ptResult	(OUT) 	モーターチェックの結果を格納する構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecExecSelfChkMotor( SelfChkMotorResult* ptResult );

//---------------------------------------------------------------------------
//! 自己診断のLEDチェックを開始します。
//  
//! @param  bLedOnOff	(IN)	LEDを全点灯(=TRUE)、LEDを全消灯(=FALSE)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecStartSelfChkLed( BOOL bLedOnOff );

//---------------------------------------------------------------------------
//! 自己診断のLEDチェックを終了します。
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecStopSelfChkLed();

//---------------------------------------------------------------------------
//! 自己診断の感度チェックを開始します。
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecStartSelfChkSens();

//---------------------------------------------------------------------------
//! 自己診断の感度チェックを終了します。
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecStopSelfChkSens();

//---------------------------------------------------------------------------
//! 自己診断の感度チェックの結果算出を実行します。
//  
//! @param  ptResult	(OUT) 	感度チェックの結果を格納する構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecExecSelfChkSens( SelfChkSensResult* ptResult );


//===========================================================================
//	ゲージ設定専用関数
//===========================================================================
//---------------------------------------------------------------------------
//! ゲージ基準パラメータを読み込み、ライブラリへ設定するとともに値を取得します。
//  
//! @param  ptParam	(OUT)	ゲージ基準パラメータを格納する構造体のポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecReadVecGaugeIni( VecGaugeIni* ptParam );

//---------------------------------------------------------------------------
//! 始業前点検設定パラメータを読み込み、ライブラリへ設定するとともに値を取得します。
//  
//! @param  ptParam	(OUT)	始業前点検設定パラメータを格納する構造体のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecReadSSettingIni( SensorSettingIni* ptParam );

//---------------------------------------------------------------------------
//! 始業前点検設定パラメータをライブラリへ設定し、ファイルへ書き込みます。
//  
//! @param  ptParam	(IN)	始業前点検設定パラメータを格納した構造体のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecWriteSSettingIni( SensorSettingIni* ptParam );

//---------------------------------------------------------------------------
//! 始業前点検設定パラメータを初期化します。
//  
//! @param  ptParam	(OUT)	始業前点検設定パラメータを格納する構造体のポインタ
//---------------------------------------------------------------------------
DLL_API void WINAPI TdsVecClearSSettingIni( SensorSettingIni* ptParam );


//===========================================================================
//	その他関数
//===========================================================================
//---------------------------------------------------------------------------
//! 出力したログファイルを削除します。
//  
//! @param	iFileNum	(IN)	残すファイル数
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecDeleteErrorLogFile( int iFileNum );

//===========================================================================
//	ApiScan輝度マスク機能改良関数
//===========================================================================
//---------------------------------------------------------------------------
//! 通常測定時の輝度スライスパラメータを設定します。
//  
//! @param	iSimpleSens	(IN)	輝度スライスを設定する計測簡易感度番号
//! @param	usVal		(IN)	設定する輝度スライス
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetBrightSliceLevel( int iSimpleSens, unsigned short usVal );

//---------------------------------------------------------------------------
//! 通常測定時の輝度スライスパラメータを取得します。
//  
//! @param	iSimpleSens	(IN)	取得する輝度スライスの計測簡易感度番号
//! @param	pusVal		(OUT)	取得する輝度スライスへのポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecGetBrightSliceLevel( int iSimpleSens, unsigned short* pusVal );

//---------------------------------------------------------------------------
//! 通常測定時の角度マスクパラメータを設定します。
//  
//! @param	dThreshold	(IN)	設定する角度マスク閾値(度)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetAngleMask( double dThreshold );

//---------------------------------------------------------------------------
//! 通常測定時の角度マスクパラメータを取得します。
//  
//! @param	pdThreshold	(OUT)	取得する角度マスク閾値(度)へのポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecGetAngleMask( double* pdThreshold );

//---------------------------------------------------------------------------
//! 通常測定時の感度設定スライスパラメータを設定します。
//  
//! @param	iSimpleSens	(IN)	感度設定スライスを設定する計測簡易感度番号
//! @param	usVal		(IN)	設定する感度設定スライス
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetDataMinSliceLevel( int iSimpleSens, unsigned short usVal );

//---------------------------------------------------------------------------
//! 通常測定時の感度設定スライスパラメータを取得します。
//  
//! @param	iSimpleSens	(IN)	取得する感度設定スライスの計測簡易感度番号
//! @param	pusVal		(OUT)	取得する感度設定スライスへのポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecGetDataMinSliceLevel( int iSimpleSens, unsigned short* pusVal );


//===========================================================================
//	ApiScanマスク機能改造関数
//===========================================================================
//---------------------------------------------------------------------------
//! 通常測定時の2ピークマスクパラメータを設定します。
//  
//! @param	iMaskType		(IN)	設定する2ピークマスク設定(0:マスク有効(データ無効化)、1:マスク無効 波形幅が広い方のデータを取得、2:マスク無効 距離(Z)が近い方のデータを取得)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSet2PeakMask( int iMaskType );

//---------------------------------------------------------------------------
//! 通常測定時の2ピークマスクパラメータを取得します。
//  
//! @param	piMaskType		(OUT)	取得する2ピークマスク設定へのポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecGet2PeakMask( int* piMaskType );

//---------------------------------------------------------------------------
//! 通常測定時のエッジマスクパラメータを設定します。
//  
//! @param	iDisableNum		(IN)	設定するエッジマスク点数 (0〜6)
//! @param	iEdgeSearchNum	(IN)	設定するエッジと判断する中空点数 (1〜5)
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecSetEdgeMask( int iDisableNum, int iEdgeSearchNum );

//---------------------------------------------------------------------------
//! 通常測定時のエッジマスクパラメータを取得します。
//  
//! @param	piDisableNum	(OUT)	取得するエッジマスク点数へのポインタ
//! @param	piEdgeSearchNum	(OUT)	取得するエッジと判断する中空点数へのポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecGetEdgeMask( int* piDisableNum, int* piEdgeSearchNum );

//---------------------------------------------------------------------------
//! エッジマスクパラメータの初期値を取得します。
//  
//! @param	iSimpleSens		(IN)	取得するエッジマスクパラメータの計測簡易感度番号
//! @param	iMode			(IN)	取得するエッジマスクパラメータの計測モード
//! @param	piDisableNum	(OUT)	取得するエッジマスク点数初期値へのポインタ
//! @param	piEdgeSearchNum	(OUT)	取得するエッジと判断する中空点数初期値へのポインタ
//  
//! @return	 	正常処理(=TRUE)、異常処理(=FALSE)
//---------------------------------------------------------------------------
DLL_API BOOL WINAPI TdsVecGetEdgeMaskDefault( int iSimpleSens, int iMode, int* piDisableNum, int* piEdgeSearchNum );

}	// extern "C"

#endif // !defined(__TdsData_h)
